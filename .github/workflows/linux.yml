name: Linux

on:
  push:
    branches:
    - main
    - staging
    - trying
    - release/[0-9]+.[0-9]+
    tags:
    - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  BORS_RUN: ${{ github.event_name == 'push' && contains('refs/heads/staging refs/heads/trying', github.ref) }}

jobs:
  Lint:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'pull_request' || contains('refs/heads/staging refs/heads/trying', github.ref) }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Lint the code
      uses: ./.github/actions/lint

  GetMatrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - name: Determine job matrix
      id: set-matrix
      run: |
        set -euo pipefail

        MATRIX='{"build-type": "Debug"}
                {"build-type": "Clang"}
                {"build-type": "Release"}'

        if ! ${{ env.BORS_RUN }}; then
            MATRIX+='{"build-type": "Coverage" }'
        fi

        echo "${MATRIX}" | jq -cs '{"include": . }' | awk '{ print "::set-output name=matrix::" $0 }'

  BuildAndTest:
    needs: [Lint, GetMatrix]

    # Allow skipped Lint
    # Let Lint fail on pull requests
    if: |
      ${{
        success()
        || needs.Lint.result == 'skipped'
        || ( needs.Lint.result == 'failure'
             && github.event_name == 'pull_request' )
      }}

    outputs:
      label: ${{ steps.build-params.outputs.label }}
      channel: ${{ steps.build-params.outputs.channel }}
      snap-file: ${{ steps.build-snap.outputs.snap-file }}

    strategy:
      matrix: ${{ fromJSON(needs.GetMatrix.outputs.matrix) }}

    runs-on: ubuntu-latest

    env:
      SNAPCRAFT_BUILD_INFO: 1

    timeout-minutes: 60
    steps:
    - name: Install Snapcraft
      uses: samuelmeuli/action-snapcraft@v1

    - name: Install LXD
      uses: whywaita/setup-lxd@v1

    - name: Check out code
      uses: actions/checkout@v2
      with:
        # Need to fetch it all for submodules to work.
        fetch-depth: 0

    - name: Check out tags and submodules
      uses: ./.github/actions/checkout

    - name: Determine build parameters
      id: build-params
      uses: ./.github/actions/build-params

    - name: Patch
      env:
        PATCH_PREFIX: .github/workflows/linux
      run: |
        [ ! -f ${PATCH_PREFIX}.patch ] || patch -p1 --no-backup-if-mismatch < ${PATCH_PREFIX}.patch
        [ ! -f ${PATCH_PREFIX}-${{ matrix.build-type }}.patch ] || patch -p1 --no-backup-if-mismatch < ${PATCH_PREFIX}-${{ matrix.build-type }}.patch

    - name: Set up CCache
      id: setup-ccache
      run: |
        sudo apt-get install ccache
        ccache --max-size=2G
        /snap/bin/lxc profile device add default ccache disk source=${HOME}/.ccache/ path=/root/.ccache

        # Find common base between main and HEAD to use as cache key.
        git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules origin main
        echo "::set-output name=key::$( git merge-base origin/main ${{ github.sha }} )"

    - name: CCache
      uses: actions/cache@v2
      with:
        key: ccache-${{ runner.os }}-${{ matrix.build-type }}-${{ steps.setup-ccache.outputs.key }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ matrix.build-type }}-
        path: ~/.ccache/**

    - name: Set up coverage
      id: coverage-setup
      if: ${{ matrix.build-type == 'Coverage' }}
      run: |
        MULTIPASS_PART=${HOME}/multipass_part
        mkdir --parents ${MULTIPASS_PART}
        /snap/bin/lxc profile device add default build disk source=${MULTIPASS_PART} path=/root/parts/multipass
        echo "::set-output name=build::${MULTIPASS_PART}/build"

    - name: Build
      run: |
        # Inject the build label.
        sed -i "/cmake-parameters:/a \    - -DMULTIPASS_BUILD_LABEL=${{ steps.build-params.outputs.label }}" snap/snapcraft.yaml

        # Build the `multipass` part.
        /snap/bin/snapcraft build multipass

    - name: Clear CCache stats
      run: ccache --show-stats --zero-stats

    - name: Test
      if: ${{ matrix.build-type == 'Debug' }}
      timeout-minutes: 2
      run: |
        instance_name=`/snap/bin/lxc --project snapcraft --format=csv --columns=n list`
        /snap/bin/lxc --project snapcraft start $instance_name
        /snap/bin/lxc --project snapcraft exec $instance_name -- \
           env CTEST_OUTPUT_ON_FAILURE=1 \
               LD_LIBRARY_PATH=/root/stage/usr/lib/x86_64-linux-gnu/:/root/stage/lib/:/root/parts/multipass/build/lib/ \
               /root/parts/multipass/build/bin/multipass_tests

    - name: Measure coverage
      if: ${{ matrix.build-type == 'Coverage' }}
      timeout-minutes: 5
      run: |
        instance_name=`/snap/bin/lxc --project snapcraft --format=csv --columns=n list`
        /snap/bin/lxc --project snapcraft start $instance_name

        # Wait for snapd to actually finish- in particular, that snaps are mounted
        timeout 10 sh -c \
          'while [ "$( /snap/bin/lxc --project snapcraft exec '$instance_name' -- \
             systemctl show --property=ActiveState snapd )" != "ActiveState=active" ]; do sleep 1; done'

        # Wait for LXD container network to be ready like Snapcraft does
        timeout 40 sh -c \
          'while /snap/bin/lxc --project snapcraft exec '$instance_name' -- getent hosts multipass.run ; \
             [ $? -ne 0 ] ; do sleep 1; done'

        # The following 2 commands workaround the issue in 20.04 where the default parsing of the coverage
        # JSON file is extremely slow. This makes is use fast parsing.
        /snap/bin/lxc --project snapcraft exec $instance_name -- apt-get -y install libjson-xs-perl sudo
        /snap/bin/lxc --project snapcraft exec $instance_name -- \
           sh -c "sudo sed -i \"s/use JSON::PP/use JSON::XS/\" \`which geninfo\`"

        /snap/bin/lxc --project snapcraft exec $instance_name -- \
          env CTEST_OUTPUT_ON_FAILURE=1 \
            cmake --build /root/parts/multipass/build --target covreport
        bash <(curl -s https://codecov.io/bash) -Z -s ${{ steps.coverage-setup.outputs.build }}

    - name: Build and verify the snap
      id: build-snap
      if: ${{ matrix.build-type == 'Release' }}
      env:
        SNAP_ENFORCE_RESQUASHFS: 0
      run: |
        # Actually build the snap.
        /snap/bin/snapcraft --use-lxd

        sudo snap install review-tools
        /snap/bin/review-tools.snap-review --plugs=snap/local/plugs.json *.snap

        echo "::set-output name=snap-file::$( ls *.snap )"

    - name: Upload the snap
      uses: actions/upload-artifact@v2
      if: ${{ matrix.build-type == 'Release' }}
      with:
        name: ${{ steps.build-snap.outputs.snap-file }}
        path: ${{ steps.build-snap.outputs.snap-file }}
        if-no-files-found: error

  # Publish the snap to the store if a channel was determined and we have access to secrets.
  Publish-Snap:
    needs: BuildAndTest
    # Need to explicitly continue on Lint getting skipped.
    if: ${{
      !failure()
      && !cancelled()
      && needs.BuildAndTest.outputs.channel != ''
      && (github.event_name == 'push'
          || github.event.pull_request.head.repo.full_name == github.repository)
      }}

    runs-on: ubuntu-latest

    timeout-minutes: 15
    steps:
    - name: Download the built snap
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.BuildAndTest.outputs.snap-file }}

    - name: Install Snapcraft and log in
      uses: samuelmeuli/action-snapcraft@v1

    - name: Publish the snap
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
      run: |
        snapcraft upload *.snap --release ${{ needs.BuildAndTest.outputs.channel }}

  # Report result to Bors on `staging` and `trying` branches.
  Linux:
    if: ${{ always() && github.event_name == 'push' && contains('refs/heads/staging refs/heads/trying', github.ref) }}
    needs:
    - BuildAndTest

    runs-on: ubuntu-latest

    steps:
    - name: Report failure
      if: ${{ needs.BuildAndTest.result != 'success' }}
      run: exit 1

  # Dispatch to the private side
  Dispatch:
    needs:
    - BuildAndTest
    - Publish-Snap

    # Only dispatch if we have access to secrets.
    # Need to explicitly continue on Lint getting skipped.
    if: ${{
      !failure()
      && !cancelled()
      && (github.event_name == 'push'
          || github.event.pull_request.head.repo.full_name == github.repository)
      }}

    runs-on: ubuntu-latest

    steps:
    - name: Determine dispatch parameters
      id: dispatch-params
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "::set-output name=head_ref::${{ github.head_ref }}"
            echo "::set-output name=head_sha::${{ github.event.pull_request.head.sha }}"
        else
            echo "::set-output name=head_ref::${{ github.ref }}"
            echo "::set-output name=head_sha::${{ github.sha }}"
        fi

    - name: Dispatch Linux integration tests
      if: ${{ env.BORS_RUN == 'true' }}
      uses: Saviq/workflow-dispatch@dist
      with:
        token: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
        workflow: Integration
        ref: ${{ steps.dispatch-params.outputs.ref }}
        sha: ${{ steps.dispatch-params.outputs.sha }}
        inputs: |
          {
            "snap-channel": "${{ needs.BuildAndTest.outputs.channel }}"
          }
      # This action will fail if `ref` moved on from `sha` to avoid mistargeting Integration runs.
      continue-on-error: true

    - name: Dispatch macOS and Windows builds
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
        repository: ${{ secrets.PRIVATE_GITHUB_REPO }}
        event-type: public_build
        client-payload: |
          {
            "repository": "${{ github.repository }}",
            "head_ref": "${{ steps.dispatch-params.outputs.head_ref }}",
            "head_sha": "${{ steps.dispatch-params.outputs.head_sha }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "draft": "${{ github.event.pull_request.draft }}",
            "label": "${{ needs.BuildAndTest.outputs.label }}",
            "dispatch_ci": "${{ env.BORS_RUN == 'true' }}"
          }
